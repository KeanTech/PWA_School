@page "/UploadPictures"
@using PWA_Blazor.Component;
@inject Blazored.LocalStorage.ILocalStorageService localStore

@if (isLoading == false)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Image</th>
                <th scope="col">Image Name</th>
                <th scope="col">Image Size (Bytes)</th>
                <th scope="col">Image Format</th>

            </tr>
        </thead>

        <tbody>
            @*@foreach (var item in storageList)
        {
        <tr>
        <th scope="row">@storageList.IndexOf(item)</th>
        <td><img alt="" src="@item.Base64data" style="height:50px;width:50px;" /></td>
        <td onclick="">@item.FileName</td>
        <td>@item.FileSize</td>
        <td>@item.ContentType</td>
        </tr>

        }*@
            @if (storageList.Count > 0)
            { 
                <TableBody Items="@storageList"></TableBody>
            }

        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}
@if (ShowDialog)
{
    <ModalDialog DialogType="ModalDialog.ModalDialogType.OkCancel"
             OnClose="@OnCloseDialog">
    </ModalDialog>
}

<p>
    <label class="fw-bolder">
        Select file or drop file here:
    </label>
    <div class="border-2 border-primary w-25" >

        <InputFile OnChange="@LoadFiles" single accept=".jpg,.jpeg,.png,.PNG" class="btn btn-primary" />
    
    </div>
    <div class="mt-2">
        <label>
            <button class="btn btn-success" @onclick="OnOpenDialog">Upload</button>
        </label>
        <label>
            <button class="btn btn-danger" @onclick="ClearStorage">Clear Storage</button>
        </label>
    </div>
    
</p>



@code {
    /// <summary>
    /// This is used to determine if the dialogbox should be shown or not
    ///
    /// <para>Used with <seealso cref="ModalDialog"/></para>
    ///
    /// 
    /// <code> 
    /// @if (ShowDialog)
    /// {
    ///    The modal goes here...
    /// }    
    ///</code>
    /// 
    /// </summary>
    /// 
    ///
    /// <param name="ShowDialog"></param>
    /// <returns></returns>
    public bool ShowDialog { get; set; }
    /// <summary>
    /// This is used to determine if the page is loading data or not 
    ///<para>And change the html accordingly</para>
    ///<para> If the page is not loading data</para>
    /// <code>
    ///@if (isLoading)
    ///{
    ///  html goes here...
    ///}
    ///</code>
    /// <para> When page is loading data </para>
    /// <code>
    ///else
    ///{
    ///  Loading...
    ///}
    ///</code>
    /// </summary>
    ///
    /// <param name="isLoading"></param>
    /// <returns></returns>
    private bool isLoading;
    private string extensionname = "default";
    /// <summary>
    /// This list is used to store Images that the user uploads
    ///<para>It will be cached by the <see cref="Blazored.LocalStorage.ILocalStorageService"/></para>
    ///<para> If the page is not loading data</para>
    /// </summary>
    ///
    /// <param name="storageList"></param>
    /// <returns></returns>
    private List<ImageFile> storageList = new List<ImageFile>();
    private ImageSizeAndTypes sizeAndTypes = new ImageSizeAndTypes();
    private IBrowserFile file;

    ///<summary>
    /// This method runs when the page gets initialized 
    /// The page throws an error because this list is used in the view/page 
    ///<para><see cref="storageList"/> is null</para>
    ///<para>Thats why it will get set by this method</para> 
    ///</summary>
    ///<returns><see cref="Task"/></returns>
    protected override async Task OnInitializedAsync()
    {
        storageList = await localStore.GetItemAsync<List<ImageFile>>("Img");
        if (storageList == null || storageList.Count < 1)
            storageList = new List<ImageFile>();

    }

    ///<summary>
    /// This method responses on the <see cref="EventCallback{DialogAnwser}"/>
    /// <para>From <see cref="ModalDialog.OnClose"/></para>
    ///
    ///
    /// </summary>
    ///<param name="anwser">DialogAnwser data is being changed by user in the <see cref="ModalDialog"/></param>
    ///<returns><see cref="Task"/></returns>
    private async void OnCloseDialog(DialogAnwser anwser)
    {
        isLoading = true;
        if (anwser.ButtonClicked == false)
        {
            ShowDialog = false;
            return;
        }

        if (string.IsNullOrEmpty(anwser.ImageType))
            extensionname = Path.GetExtension(file.Name);
        else
            extensionname = anwser.ImageType;

        if (sizeAndTypes.ImageTypes.Contains(extensionname))
        {
            ImageFile imageFile = await ImageHandling.GetImageFile(file, anwser);
            storageList.Add(imageFile);
        }
       

        UpdateStorage();
        isLoading = false;
        ShowDialog = false;
        StateHasChanged();
    }

    ///<summary>
    /// <see cref="IBrowserFile"/ needs to be set for this method to work>
    ///<para>If the file is not set the method will return</para>
    /// Otherwise is will set the ShowDialog to true and the Dialog will pop up
    /// </summary>
    ///<param> </param>
    private void OnOpenDialog()
    {
        if (file == null)
            return;

        ShowDialog = true;
        StateHasChanged();
    }

    ///<summary>
    /// Takes data from <see cref="storageList"/> an stores is in <see cref="Blazored.LocalStorage.ILocalStorageService"/>
    /// </summary>
    ///<returns></returns>
    private async void UpdateStorage()
    {
        await localStore.SetItemAsync("Img", storageList);
    }

    ///<summary>
    /// Clear the <see cref="storageList"/> and removes all data from the <see cref="Blazored.LocalStorage.ILocalStorageService"/> cache
    /// </summary>
    ///<returns></returns>
    private async void ClearStorage()
    {
        await localStore.ClearAsync();
        storageList.Clear();
        StateHasChanged();
    }

    ///<summary>
    /// Puts the user selected file i variable
    /// <para>That is used in the <see cref="OnCloseDialog(DialogAnwser)"/> if its not set the user can upload</para>
    /// </summary>
    ///<paramref name="e"/> Is the user selected file
    ///<returns></returns>
    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

}