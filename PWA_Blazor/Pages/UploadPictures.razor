@page "/UploadPictures"
@using PWA_Blazor.Component;

@inject Blazored.LocalStorage.ILocalStorageService localStore

@if (isLoading == false)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Image</th>
                <th scope="col">Image Name</th>
                <th scope="col">Image Size (Bytes)</th>
                <th scope="col">Image Format</th>

            </tr>
        </thead>

        <tbody>
            @foreach (var item in storageList)
            {
                <tr>
                    <th scope="row">@storageList.IndexOf(item)</th>
                    <td><img alt="" src="@item.Base64data" style="height:50px;width:50px;" /></td>
                    <td>@item.FileName</td>
                    <td>@item.FileSize</td>
                    <td>@item.ContentType</td>
                </tr>

            }

        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}
@if (ShowDialog)
{
    <ModalDialog DialogType="ModalDialog.ModalDialogType.OkCancel"
             OnClose="@OnCloseDialog">
    </ModalDialog>
}


<p>
    <label>
        Select file
        <InputFile OnChange="@LoadFiles" single accept=".jpg,.jpeg,.png,.PNG" />
    </label>
    <label>
        <button class="btn btn-primary" @onclick="OnOpenDialog">Upload</button>
    </label>
    <label>
        <button class="btn btn-primary" @onclick="ClearStorage">Clear Storage</button>
    </label>

</p>



@code {
    public bool ShowDialog { get; set; }
    private bool isLoading;
    private string extensionname = "default";
    private List<ImageFile> storageList = new List<ImageFile>();
    private string isdisplayimage;
    private ImageSizeAndTypes sizeAndTypes = new ImageSizeAndTypes();
    private IBrowserFile file;

    protected override async Task OnInitializedAsync()
    {
        storageList = await localStore.GetItemAsync<List<ImageFile>>("Img");
        if (storageList == null || storageList.Count < 1)
            storageList = new List<ImageFile>();
    }

    // This method is called on evnet in ModalDialog component to set the image name and sizes
    private async void OnCloseDialog(DialogAnwser anwser)
    {
        if (anwser.ButtonClicked == false)
        {
            ShowDialog = false;
            return;
        }

        if (string.IsNullOrEmpty(anwser.ImageType))
            extensionname = Path.GetExtension(file.Name);
        else
            extensionname = anwser.ImageType;

        if (sizeAndTypes.ImageTypes.Contains(extensionname))
        {
            ImageFile imageFile = await ImageHandling.GetImageFile(file, anwser);
            storageList.Add(imageFile);
            isdisplayimage = "block";
        }
        else
        {
            isdisplayimage = "none";
        }

        UpdateStorage();
        isLoading = false;
        ShowDialog = false;
        StateHasChanged();
    }

    private void OnOpenDialog()
    {
        if (file == null)
            return;

        ShowDialog = true;
        StateHasChanged();
    }

    private async void UpdateStorage()
    {
        await localStore.SetItemAsync("Img", storageList);
    }

    private async void ClearStorage()
    {
        await localStore.ClearAsync();
        storageList.Clear();
        StateHasChanged();
    }

    private void DropdownClicked(string selected)
    {
        var test = selected;
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

}